#pragma once
#include <stdlib.h>
#include <algorithm>
#include <cassert>

template<typename T>
struct Vector {
private:
	T* m_data;
	size_t m_size;
	size_t m_capacity;
	constexpr static double grow_limit = 0.5;
public:
	Vector() : m_data(nullptr), m_size(0), m_capacity(0) {}

	Vector(int capacity) {
		m_data = new T[capacity];
		if (!m_data) {
			m_data = nullptr;
			m_size = 0;
			m_capacity = 0;
			return;
		}
		m_capacity = capacity;
		m_size = 0;
	}

	auto size() const noexcept {
		return m_size;
	}

	void push_back(T val) {
		if (m_size + 1 > (m_capacity * grow_limit)) {
			grow();
			assert(m_size + 1 <= m_capacity);
		}

		m_data[m_size] = std::move(val);
		m_size++;
	}

	void pop_back() {
		assert(m_size > 0);
		m_data[m_size - 1].~T();
		m_size--;
	}

	T& back() {
		assert(m_size > 0);
		return m_data[m_size - 1];
	}
	
	const T& back() const {
		assert(m_size > 0);
		return m_data[m_size - 1];
	}

	T& at(size_t ind) {
		assert(ind >= 0 && ind < m_size);
		return m_data[ind];
	}

	void grow() {
		auto new_cap = (m_capacity + 1) * 2;
		T* new_place = new T[new_cap];
		if (!new_place) {
			return;
		}

		for (size_t i = 0; i < m_size; i++)
			new_place[i] = std::move(m_data[i]);
		delete[] m_data;
		m_capacity = new_cap;
		m_data = new_place;
	}

	~Vector() {
		for (int i = 0; i < m_size; i++) {
			m_data[i].~T();
		}
		delete[] m_data;
		m_data = nullptr;
		m_size = 0;
		m_capacity = 0;
	}
};